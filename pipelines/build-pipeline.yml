parameters:
  - name: nugetVersionParameter
    displayName: NuGet Version
    type: string
    default: 1.0.0-dev
  - name: publishCLIForWindows_x64
    displayName: Publish for Windows-x64
    type: boolean
    default: true
  - name: publishCLIForLinux_x64
    displayName: Publish for Linux-x64
    type: boolean
    default: true
  - name: publishCLIForMacOS_arm64
    displayName: Publish for MacOS-arm64
    type: boolean
    default: true
  - name: packNuGet
    displayName: Pack NuGet
    type: boolean
    default: true    

trigger:
- main

pr:
  branches:
    include:
    - main

pool:
  vmImage: windows-2019

variables:
  nugetVersion: ${{ parameters.nugetVersionParameter }}

steps:

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '7.x'

- task: DotNetCoreCLI@2
  displayName: 'DotNetBuild'
  inputs:
    command: 'build'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'DotNetTest'
  inputs:
    command: 'test'
    projects: '**/TMFileParserTest.csproj'

- task: CredScan@3
  inputs:
    verboseOutput: true

- task: RoslynAnalyzers@3
  inputs:
    userProvideBuildInfo: 'msBuildInfo'
    msBuildVersion: '16.0'
    msBuildArchitecture: 'amd64'
    msBuildCommandline: 'dotnet.exe build $(Build.SourcesDirectory)\TMFileParser\TMFileParser.sln'

- task: BinSkim@4
  inputs:
    InputType: 'CommandLine'
    arguments: 'analyze $(Build.SourcesDirectory)\* --recurse --sympath "Srv*http://msdl.microsoft.com/download/symbols" --verbose'

- task: Semmle@1
  inputs:
    sourceCodeDirectory: '$(Build.SourcesDirectory)'
    language: 'csharp'
    buildCommandsString: 'dotnet.exe clean $(Build.SourcesDirectory)\TMFileParser\TMFileParser.sln && dotnet.exe build $(Build.SourcesDirectory)\TMFileParser\TMFileParser.sln'
    querySuite: 'Recommended'
    timeout: '1800'
    ram: '6384'
    addProjectDirToScanningExclusionList: true

- task: SdtReport@2
  inputs:
    GdnExportHtmlFile: true
    GdnExportAllTools: false
    GdnExportGdnToolBinSkim: true
    GdnExportGdnToolSemmle: true

- task: PublishSecurityAnalysisLogs@3
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: false
    AntiMalware: false
    APIScan: false
    Armory: false
    Bandit: false
    BinSkim: true
    CodesignValidation: false
    CredScan: true
    CSRF: false
    ESLint: false
    Flawfinder: false
    FortifySCA: false
    FxCop: false
    ModernCop: false
    MSRD: false
    PoliCheck: false
    RoslynAnalyzers: true
    SDLNativeRules: false
    Semmle: true
    SpotBugs: false
    TSLint: false
    WebScout: false
    ToolLogsNotFoundAction: 'Standard'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.x'

- task: EsrpCodeSigning@1
  inputs:
    ConnectedServiceName: 'ESRP Signing'
    FolderPath: '$(Build.SourcesDirectory)'
    Pattern: 'TMFileParser.dll'
    signConfigType: 'inlineSignParams'
    inlineOperation:  |
          [
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolSign",
                      "Parameters" : {
                          "OpusName" : "Microsoft",
                          "OpusInfo" : "http://www.microsoft.com",
                          "FileDigest" : "/fd \"SHA256\"",
                          "PageHash" : "/NPH",
                          "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'

- ${{ if eq(parameters.packNuGet, true) }}:
  - task: DotNetCoreCLI@2
    inputs:
      command: 'pack'
      packagesToPack: 'TMFileParser/TMFileParser/TMFileParser.csproj'
      nobuild: true
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'nugetVersion'

- ${{ if eq(parameters.publishCLIForLinux_x64, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'DotNetPublishLinux'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'TMFileParser/TMFileConverter/TMFileConverter.csproj'
      arguments: '-r linux-x64 --self-contained true -p:PublishSingleFile=True -o $(Build.ArtifactStagingDirectory)/linux'
      zipAfterPublish: false

- ${{ if eq(parameters.publishCLIForMacOS_arm64, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'DotNetPublishMacOS'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'TMFileParser/TMFileConverter/TMFileConverter.csproj'
      arguments: '-r osx.11.0-x64 --self-contained true -p:PublishSingleFile=True -o $(Build.ArtifactStagingDirectory)/macOS'
      zipAfterPublish: false

- ${{ if eq(parameters.publishCLIForWindows_x64, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'DotNetPublishWindows'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'TMFileParser/TMFileConverter/TMFileConverter.csproj'
      arguments: '-r win-x64 --self-contained true -p:PublishSingleFile=True -o $(Build.ArtifactStagingDirectory)/windows'
      zipAfterPublish: false

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.x'

- task: EsrpCodeSigning@1
  inputs:
    ConnectedServiceName: 'ESRP Signing'
    FolderPath: '$(Build.ArtifactStagingDirectory)'
    Pattern: 'TMFileParser.dll,TMFileConverter.exe'
    signConfigType: 'inlineSignParams'
    inlineOperation:  |
          [
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolSign",
                      "Parameters" : {
                          "OpusName" : "Microsoft",
                          "OpusInfo" : "http://www.microsoft.com",
                          "FileDigest" : "/fd \"SHA256\"",
                          "PageHash" : "/NPH",
                          "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

- task: EsrpCodeSigning@1
  inputs:
    ConnectedServiceName: 'ESRP Signing'
    FolderPath: '$(Build.ArtifactStagingDirectory)'
    Pattern: 'Microsoft.ThreatModeling.TMFileParser*.nupkg'
    signConfigType: 'inlineSignParams'
    inlineOperation:  |
          [
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetSign",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

- ${{ if eq(parameters.publishCLIForLinux_x64, true) }}:
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)/linux/TMFileConverter'
      Contents: 'TMFileConverter'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-linux'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-linux'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-linux.zip'
      replaceExistingArchive: true

- ${{ if eq(parameters.publishCLIForMacOS_arm64, true) }}:
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)/macOS/TMFileConverter'
      Contents: 'TMFileConverter'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-macOS'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-macOS'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-macOS.zip'
      replaceExistingArchive: true

- ${{ if eq(parameters.publishCLIForWindows_x64, true) }}:
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)/windows/TMFileConverter'
      Contents: |
          *.dll
          TMFileConverter.exe
      TargetFolder: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-windows'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-windows'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/release/TMFileConverter-windows.zip'
      replaceExistingArchive: true
 
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

